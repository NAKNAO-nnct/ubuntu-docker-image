name: Push Docker image to the GitHub Container Registry

on:
  schedule:
    - cron: '0 13 * * 2'
  workflow_dispatch:
  push:
    branches:
      - main
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    name: Docker Build and Push
    runs-on: ubuntu-latest

    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}
      cancel-in-progress: true

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - uses: actions/checkout@v4
        with:
          repository: aws/aws-codebuild-docker-images
          path: docker-standard

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true

      - name: replace Dockerfile
        run: cp Dockerfile.aws.base docker-standard/ubuntu/standard/7.0/Dockerfile

      - name: build standard image
        uses: docker/build-push-action@v5
        with:
          context: docker-standard/ubuntu/standard/7.0
          push: true
          tags: aws/codebuild/standard:7.0
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Lowercase the image name
        run: echo IMAGE_NAME="${IMAGE_NAME,,}" >> $GITHUB_ENV

      - name: Build and Push the image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Log in to GitHub Container Registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token

      - name: Get repository name
        run: |
          REPO_NAME="$(echo ${{ github.repository }} | awk -F/ '{ print $2 }')" >> $GITHUB_ENV
          echo "REPO_NAME=${REPO_NAME}" >> $GITHUB_ENV

      - name: Delete Untagged images
        run: |
          # 1. タグ一覧取得
          TAGS=$(gh api -X GET /user/packages/container/${{ env.REPO_NAME }}/versions --paginate --jq '.[] | select(.metadata.container.tags | length > 0) | .metadata.container.tags[]')

          # 2. 各タグのdigest収集
          TAGGED_DIGESTS=""
          for TAG in $TAGS; do
            DIGEST=$(docker manifest inspect ghcr.io/${{ env.IMAGE_NAME }}:${TAG} | jq -r '.manifests[].digest')
            TAGGED_DIGESTS="${TAGGED_DIGESTS}\n${DIGEST}"
          done

          # 3. untaggedイメージのdigest取得と削除判定（APIからid/digest取得）
          UNTAGGED_IMAGES=$(gh api -X GET /user/packages/container/${{ env.REPO_NAME }}/versions --paginate --jq '.[] | select(.metadata.container.tags | length == 0)')
          for row in $UNTAGGED_IMAGES; do
            DIGEST=$(echo "$row" | jq -r '.name')
            DIGEST=${DIGEST#sha256:}
            ID=$(echo "$row" | jq -r '.id')
            if ! echo -e "$TAGGED_DIGESTS" | grep -q "$DIGEST"; then
              echo "Deleting untagged image ID: $ID (digest: $DIGEST)"
              gh api -X DELETE /user/packages/container/${{ env.REPO_NAME }}/versions/$ID
            else
              echo "Skipping untagged image ID: $ID (digest: $DIGEST), referenced by a tag"
            fi
          done
